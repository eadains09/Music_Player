import java.io.File;
import java.io.IOException;


import org.jaudiotagger.audio.AudioFile;
import org.jaudiotagger.audio.AudioFileIO;
import org.jaudiotagger.audio.exceptions.CannotReadException;
import org.jaudiotagger.audio.exceptions.InvalidAudioFrameException;
import org.jaudiotagger.audio.exceptions.ReadOnlyFileException;
import org.jaudiotagger.tag.FieldKey;
import org.jaudiotagger.tag.Tag;
import org.jaudiotagger.tag.TagException;


public class PlayerBackEnd {
	
	private static SongLibrary sl = new SongLibrary();
	
	public void playSong()
	{
		
	}
	
	public void stopSong()
	{
		
	}
	
	public static void loadAllMP3(File f)
	{
		if (f.isFile())
		{
			PlayerBackEnd.loadSingleMP3(f);
		}else{
			File[] files = f.listFiles();
			for(File currFile: files)
			{
				PlayerBackEnd.loadAllMP3(currFile);
			}
		}
	}
	
	public static void loadSingleMP3(File f)
	{
		Song currSong;
		AudioFile af = null;
		try {
			af = AudioFileIO.read(f);
		} catch (CannotReadException | IOException | TagException
				| ReadOnlyFileException | InvalidAudioFrameException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Tag tag = af.getTag();
		String title = tag.getFirst(FieldKey.TITLE);
		String artist = tag.getFirst(FieldKey.ARTIST);
		String album = tag.getFirst(FieldKey.ALBUM);
		String genre = tag.getFirst(FieldKey.GENRE);
		
		currSong = new Song (title, artist, album, genre, f.getPath());

		sl.addSong(currSong);
	}
	
	public static int librarySize()
	{
		return sl.librarySize();
	}
	
	public static Song getSong(int i)
	{
		return sl.getSong(i);
	}
	
	public static void sortSongs()
	{
		sl.sortSongLibrary();
	}
	
	public static void saveLibrary(File f)
	{
		sl.saveLibrary(f);
	}
	
	public static void loadLibrary(File f)
	{
		sl.loadLibrary(f);
	}
	

}
